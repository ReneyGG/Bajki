[gd_scene load_steps=27 format=2]

[ext_resource path="res://Assets/Nowe/Pierdolona_kuchnia-1.png.png" type="Texture" id=1]
[ext_resource path="res://Scenes/Door.tscn" type="PackedScene" id=2]
[ext_resource path="res://Scenes/Player.tscn" type="PackedScene" id=3]
[ext_resource path="res://Scripts/Camera2D.gd" type="Script" id=4]
[ext_resource path="res://Scenes/Torch.tscn" type="PackedScene" id=5]
[ext_resource path="res://Scenes/Table.tscn" type="PackedScene" id=6]
[ext_resource path="res://Assets/Nowe/Okno.png" type="Texture" id=7]
[ext_resource path="res://Assets/Nowe/Blat.png" type="Texture" id=8]
[ext_resource path="res://Assets/Nowe/Kocioek.png" type="Texture" id=9]
[ext_resource path="res://Assets/Nowe/Apple.png" type="Texture" id=10]
[ext_resource path="res://Assets/Nowe/szafka.png" type="Texture" id=11]
[ext_resource path="res://Assets/Nowe/Flaga/flag (4).png" type="Texture" id=12]
[ext_resource path="res://Assets/notel.png" type="Texture" id=13]
[ext_resource path="res://Scenes/Note.tscn" type="PackedScene" id=14]
[ext_resource path="res://font.tres" type="Theme" id=15]
[ext_resource path="res://Assets/Nowe/tacki (1).png" type="Texture" id=16]
[ext_resource path="res://Assets/Nowe/tacki (2).png" type="Texture" id=17]
[ext_resource path="res://Assets/Nowe/tacki (4).png" type="Texture" id=18]
[ext_resource path="res://Assets/Nowe/tacki (3).png" type="Texture" id=19]
[ext_resource path="res://Assets/Nowe/szkielet (1).png" type="Texture" id=20]
[ext_resource path="res://Assets/Nowe/szkielet (2).png" type="Texture" id=21]
[ext_resource path="res://Assets/Nowe/szkielet (3).png" type="Texture" id=22]

[sub_resource type="RectangleShape2D" id=1]
extents = Vector2( 229, 18 )

[sub_resource type="RectangleShape2D" id=2]
extents = Vector2( 12.5, 126 )

[sub_resource type="Shader" id=3]
code = "/*
Shader from Godot Shaders - the free shader library.
godotshaders.com/shader/god-rays

Feel free to use, improve and change this shader according to your needs
and consider sharing the modified result on godotshaders.com.
*/

shader_type canvas_item;

uniform float angle = -0.3;
uniform float position = -0.2;
uniform float spread : hint_range(0.0, 1.0) = 0.3;
uniform float cutoff : hint_range(-1.0, 1.0) = 0.1;
uniform float falloff : hint_range(0.0, 1.0) = 0.2;
uniform float edge_fade : hint_range(0.0, 1.0) = 0.15;

uniform float speed = 1.0;
uniform float ray1_density = 8.0;
uniform float ray2_density = 30.0;
uniform float ray2_intensity : hint_range(0.0, 1.0) = 0.01;

uniform vec4 color : hint_color = vec4(1.0, 0.9, 0.65, 0.8);

uniform bool hdr = false;
uniform float seed = 5.0;

// Random and noise functions from Book of Shader's chapter on Noise.
float random(vec2 _uv) {
    return fract(sin(dot(_uv.xy,
                         vec2(12.9898, 78.233))) *
        43758.5453123);
}

float noise (in vec2 uv) {
    vec2 i = floor(uv);
    vec2 f = fract(uv);

    // Four corners in 2D of a tile
    float a = random(i);
    float b = random(i + vec2(1.0, 0.0));
    float c = random(i + vec2(0.0, 1.0));
    float d = random(i + vec2(1.0, 1.0));


    // Smooth Interpolation

    // Cubic Hermine Curve. Same as SmoothStep()
    vec2 u = f * f * (3.0-2.0 * f);

    // Mix 4 coorners percentages
    return mix(a, b, u.x) +
            (c - a)* u.y * (1.0 - u.x) +
            (d - b) * u.x * u.y;
}

mat2 rotate(float _angle){
    return mat2(vec2(cos(_angle), -sin(_angle)),
                vec2(sin(_angle), cos(_angle)));
}

vec4 screen(vec4 base, vec4 blend){
	return 1.0 - (1.0 - base) * (1.0 - blend);
}

void fragment()
{
	
	// Rotate, skew and move the UVs
	vec2 transformed_uv = ( rotate(angle) * (UV - position) )  / ( (UV.y + spread) - (UV.y * spread) );
	
	// Animate the ray according the the new transformed UVs
	vec2 ray1 = vec2(transformed_uv.x * ray1_density + sin(TIME * 0.1 * speed) * (ray1_density * 0.2) + seed, 1.0);
	vec2 ray2 = vec2(transformed_uv.x * ray2_density + sin(TIME * 0.2 * speed) * (ray1_density * 0.2) + seed, 1.0);
	
	// Cut off the ray's edges
	float cut = step(cutoff, transformed_uv.x) * step(cutoff, 1.0 - transformed_uv.x);
	ray1 *= cut;
	ray2 *= cut;
	
	// Apply the noise pattern (i.e. create the rays)
	float rays;
	
	if (hdr){
		// This is not really HDR, but check this to not clamp the two merged rays making 
		// their values go over 1.0. Can make for some nice effect
		rays = noise(ray1) + (noise(ray2) * ray2_intensity);
	}
	else{
		 rays = clamp(noise(ray1) + (noise(ray2) * ray2_intensity), 0., 1.);
	}
	
	// Fade out edges
	rays *= smoothstep(0.0, falloff, (1.0 - UV.y)); // Bottom
	rays *= smoothstep(0.0 + cutoff, edge_fade + cutoff, transformed_uv.x); // Left
	rays *= smoothstep(0.0 + cutoff, edge_fade + cutoff, 1.0 - transformed_uv.x); // Right
	
	// Color to the rays
	vec3 shine = vec3(rays) * color.rgb;

	// Try different blending modes for a nicer effect. \"Screen\" is included in the code,
	// but take a look at https://godotshaders.com/snippet/blending-modes/ for more.
	// With \"Screen\" blend mode:
	shine = screen(texture(SCREEN_TEXTURE, SCREEN_UV), vec4(color)).rgb;
	
	COLOR = vec4(shine, rays * color.a);
}"

[sub_resource type="ShaderMaterial" id=4]
shader = SubResource( 3 )
shader_param/angle = -0.3
shader_param/position = -0.2
shader_param/spread = 0.3
shader_param/cutoff = 0.1
shader_param/falloff = 0.2
shader_param/edge_fade = 0.15
shader_param/speed = 1.0
shader_param/ray1_density = 8.0
shader_param/ray2_density = 30.0
shader_param/ray2_intensity = 0.01
shader_param/color = Color( 1, 0.9, 0.65, 0.8 )
shader_param/hdr = false
shader_param/seed = 5.0

[node name="Room2" type="Node2D"]

[node name="TextureRect" type="TextureRect" parent="."]
margin_right = 40.0
margin_bottom = 40.0
texture = ExtResource( 1 )

[node name="Floor" type="StaticBody2D" parent="."]
position = Vector2( 216, 234 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="Floor"]
position = Vector2( -15, -6 )
shape = SubResource( 1 )

[node name="LeftWall" type="StaticBody2D" parent="."]

[node name="CollisionShape2D" type="CollisionShape2D" parent="LeftWall"]
position = Vector2( 13.5, 123 )
shape = SubResource( 2 )

[node name="RightWall" type="StaticBody2D" parent="."]
position = Vector2( 401, 0 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="RightWall"]
position = Vector2( 4, 124 )
shape = SubResource( 2 )

[node name="Door" parent="." instance=ExtResource( 2 )]
position = Vector2( 23, 172 )
scale = Vector2( -1, 1 )
open = false

[node name="Door2" parent="." instance=ExtResource( 2 )]
position = Vector2( 398, 178 )
leads = "res://Scenes/Rooms/Corridor2.tscn"

[node name="Okno2" type="Sprite" parent="."]
position = Vector2( 118, 103 )
scale = Vector2( 0.70875, 0.70875 )
texture = ExtResource( 7 )

[node name="Szafka" type="Sprite" parent="."]
position = Vector2( 184, 115 )
scale = Vector2( 0.5375, 0.5375 )
texture = ExtResource( 11 )

[node name="Szafka2" type="Sprite" parent="."]
position = Vector2( 211, 115 )
scale = Vector2( 0.5375, 0.5375 )
texture = ExtResource( 11 )

[node name="Szafka3" type="Sprite" parent="."]
position = Vector2( 238, 115 )
scale = Vector2( 0.5375, 0.5375 )
texture = ExtResource( 11 )

[node name="Torch" parent="." instance=ExtResource( 5 )]
position = Vector2( 333, 79 )
scale = Vector2( 0.828125, 0.828125 )

[node name="Torch2" parent="." instance=ExtResource( 5 )]
position = Vector2( 74, 76 )
scale = Vector2( 0.828125, 0.828125 )

[node name="Flaga" type="Sprite" parent="."]
position = Vector2( 303, 87 )
scale = Vector2( 0.57, 0.57 )
texture = ExtResource( 12 )

[node name="Kociołek2" type="Sprite" parent="."]
position = Vector2( 314, 173 )
scale = Vector2( 0.6625, 0.6625 )
texture = ExtResource( 9 )

[node name="Table2" parent="." instance=ExtResource( 6 )]
position = Vector2( 122, 181 )

[node name="Blat1" type="Sprite" parent="."]
position = Vector2( 173.881, 174 )
scale = Vector2( 1.01136, 1.01136 )
texture = ExtResource( 8 )

[node name="Blat2" type="Sprite" parent="."]
position = Vector2( 232, 174 )
scale = Vector2( 1.01136, 1.01136 )
texture = ExtResource( 8 )

[node name="Tacka" type="Sprite" parent="."]
position = Vector2( 230, 151 )
scale = Vector2( 0.7, 0.7 )
texture = ExtResource( 17 )

[node name="Tacka2" type="Sprite" parent="."]
position = Vector2( 187, 97 )
scale = Vector2( 0.5, 0.5 )
texture = ExtResource( 18 )

[node name="Tacka3" type="Sprite" parent="."]
position = Vector2( 128, 147 )
scale = Vector2( 0.5, 0.5 )
texture = ExtResource( 16 )

[node name="apple" type="Sprite" parent="."]
position = Vector2( 157.881, 149 )
scale = Vector2( 0.4375, 0.4375 )
texture = ExtResource( 10 )

[node name="Szkielet2" type="Sprite" parent="."]
position = Vector2( 269, 189 )
scale = Vector2( 0.4, 0.4 )
texture = ExtResource( 21 )

[node name="Note" parent="." instance=ExtResource( 14 )]
position = Vector2( 186, 155 )
content = "Sniacy bluszcz wystepuje jedynie na zamku Usse. Jego dokladne pochodzenie jest nieznane. Pojawil sie 100 lat temu, gdy krolestwo pograzylo sie we snie. Legenda glosi ze jest to zrodlo poteznej mocy magicznej, dajace poczatek Wielkiemu Snieniu. Niestety brakuje smialkow do sprawdzenia tej teorii…"

[node name="Player" parent="." instance=ExtResource( 3 )]
position = Vector2( 59, 175 )

[node name="Tacka4" type="Sprite" parent="."]
position = Vector2( 135, 227 )
texture = ExtResource( 19 )

[node name="Szkielet" type="Sprite" parent="."]
position = Vector2( 303, 226 )
scale = Vector2( 0.6, 0.6 )
texture = ExtResource( 20 )

[node name="Szkielet3" type="Sprite" parent="."]
position = Vector2( 57, 228 )
scale = Vector2( 0.4, 0.4 )
texture = ExtResource( 22 )

[node name="ColorRect" type="ColorRect" parent="."]
self_modulate = Color( 1, 1, 1, 0.490196 )
material = SubResource( 4 )
margin_left = 109.047
margin_top = 85.0947
margin_right = 245.047
margin_bottom = 238.095

[node name="Camera2D" type="Camera2D" parent="."]
position = Vector2( 210, 123 )
script = ExtResource( 4 )

[node name="TextureRect" type="TextureRect" parent="Camera2D"]
visible = false
light_mask = 0
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -106.0
margin_top = -106.0
margin_right = 106.0
margin_bottom = 106.0
texture = ExtResource( 13 )
expand = true

[node name="Label2" type="Label" parent="Camera2D/TextureRect"]
modulate = Color( 0, 0, 0, 1 )
self_modulate = Color( 0, 0, 0, 1 )
margin_left = 35.0
margin_top = 13.0
margin_right = 209.0
margin_bottom = 46.0
rect_scale = Vector2( 0.8, 0.8 )
theme = ExtResource( 15 )
text = "Praktyczna wiedza roslinna"
align = 1
autowrap = true

[node name="Label" type="Label" parent="Camera2D/TextureRect"]
self_modulate = Color( 0, 0, 0, 1 )
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = 56.0
margin_top = 41.0
margin_right = 14.0
margin_bottom = 76.0
rect_scale = Vector2( 0.6, 0.6 )
theme = ExtResource( 15 )
text = "Sniacy bluszcz wystepuje jedynie na zamku Usse. Jego dokladne pochodzenie jest nieznane. Pojawil sie 100 lat temu, gdy krolestwo pograzylo sie we snie. Legenda glosi ze jest to zrodlo poteznej mocy magicznej, dajace poczatek Wielkiemu Snieniu. Niestety brakuje smialkow do sprawdzenia tej teorii…"
align = 1
autowrap = true
