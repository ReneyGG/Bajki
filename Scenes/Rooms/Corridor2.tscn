[gd_scene load_steps=19 format=2]

[ext_resource path="res://Assets/korytarz.png" type="Texture" id=1]
[ext_resource path="res://Scenes/Player.tscn" type="PackedScene" id=2]
[ext_resource path="res://Scenes/Door.tscn" type="PackedScene" id=3]
[ext_resource path="res://Scripts/Camera2D.gd" type="Script" id=4]
[ext_resource path="res://Scenes/Torch.tscn" type="PackedScene" id=5]
[ext_resource path="res://Assets/Nowe/Obraz_krola.png" type="Texture" id=6]
[ext_resource path="res://Assets/Nowe/Okno.png" type="Texture" id=7]
[ext_resource path="res://Assets/notel.png" type="Texture" id=8]
[ext_resource path="res://font.tres" type="Theme" id=9]
[ext_resource path="res://Scenes/Enemy.tscn" type="PackedScene" id=11]
[ext_resource path="res://Scenes/Wardrobe.tscn" type="PackedScene" id=12]
[ext_resource path="res://Scenes/ChandelierButton.tscn" type="PackedScene" id=13]
[ext_resource path="res://Scenes/Chandelier.tscn" type="PackedScene" id=14]

[sub_resource type="RectangleShape2D" id=1]
extents = Vector2( 291, 18 )

[sub_resource type="RectangleShape2D" id=2]
extents = Vector2( 21.5, 122 )

[sub_resource type="Shader" id=3]
code = "/*
Shader from Godot Shaders - the free shader library.
godotshaders.com/shader/god-rays

Feel free to use, improve and change this shader according to your needs
and consider sharing the modified result on godotshaders.com.
*/

shader_type canvas_item;

uniform float angle = -0.3;
uniform float position = -0.2;
uniform float spread : hint_range(0.0, 1.0) = 0.3;
uniform float cutoff : hint_range(-1.0, 1.0) = 0.1;
uniform float falloff : hint_range(0.0, 1.0) = 0.2;
uniform float edge_fade : hint_range(0.0, 1.0) = 0.15;

uniform float speed = 1.0;
uniform float ray1_density = 8.0;
uniform float ray2_density = 30.0;
uniform float ray2_intensity : hint_range(0.0, 1.0) = 0.01;

uniform vec4 color : hint_color = vec4(1.0, 0.9, 0.65, 0.8);

uniform bool hdr = false;
uniform float seed = 5.0;

// Random and noise functions from Book of Shader's chapter on Noise.
float random(vec2 _uv) {
    return fract(sin(dot(_uv.xy,
                         vec2(12.9898, 78.233))) *
        43758.5453123);
}

float noise (in vec2 uv) {
    vec2 i = floor(uv);
    vec2 f = fract(uv);

    // Four corners in 2D of a tile
    float a = random(i);
    float b = random(i + vec2(1.0, 0.0));
    float c = random(i + vec2(0.0, 1.0));
    float d = random(i + vec2(1.0, 1.0));


    // Smooth Interpolation

    // Cubic Hermine Curve. Same as SmoothStep()
    vec2 u = f * f * (3.0-2.0 * f);

    // Mix 4 coorners percentages
    return mix(a, b, u.x) +
            (c - a)* u.y * (1.0 - u.x) +
            (d - b) * u.x * u.y;
}

mat2 rotate(float _angle){
    return mat2(vec2(cos(_angle), -sin(_angle)),
                vec2(sin(_angle), cos(_angle)));
}

vec4 screen(vec4 base, vec4 blend){
	return 1.0 - (1.0 - base) * (1.0 - blend);
}

void fragment()
{
	
	// Rotate, skew and move the UVs
	vec2 transformed_uv = ( rotate(angle) * (UV - position) )  / ( (UV.y + spread) - (UV.y * spread) );
	
	// Animate the ray according the the new transformed UVs
	vec2 ray1 = vec2(transformed_uv.x * ray1_density + sin(TIME * 0.1 * speed) * (ray1_density * 0.2) + seed, 1.0);
	vec2 ray2 = vec2(transformed_uv.x * ray2_density + sin(TIME * 0.2 * speed) * (ray1_density * 0.2) + seed, 1.0);
	
	// Cut off the ray's edges
	float cut = step(cutoff, transformed_uv.x) * step(cutoff, 1.0 - transformed_uv.x);
	ray1 *= cut;
	ray2 *= cut;
	
	// Apply the noise pattern (i.e. create the rays)
	float rays;
	
	if (hdr){
		// This is not really HDR, but check this to not clamp the two merged rays making 
		// their values go over 1.0. Can make for some nice effect
		rays = noise(ray1) + (noise(ray2) * ray2_intensity);
	}
	else{
		 rays = clamp(noise(ray1) + (noise(ray2) * ray2_intensity), 0., 1.);
	}
	
	// Fade out edges
	rays *= smoothstep(0.0, falloff, (1.0 - UV.y)); // Bottom
	rays *= smoothstep(0.0 + cutoff, edge_fade + cutoff, transformed_uv.x); // Left
	rays *= smoothstep(0.0 + cutoff, edge_fade + cutoff, 1.0 - transformed_uv.x); // Right
	
	// Color to the rays
	vec3 shine = vec3(rays) * color.rgb;

	// Try different blending modes for a nicer effect. \"Screen\" is included in the code,
	// but take a look at https://godotshaders.com/snippet/blending-modes/ for more.
	// With \"Screen\" blend mode:
	shine = screen(texture(SCREEN_TEXTURE, SCREEN_UV), vec4(color)).rgb;
	
	COLOR = vec4(shine, rays * color.a);
}"

[sub_resource type="ShaderMaterial" id=4]
shader = SubResource( 3 )
shader_param/angle = -0.3
shader_param/position = -0.2
shader_param/spread = 0.3
shader_param/cutoff = 0.1
shader_param/falloff = 0.2
shader_param/edge_fade = 0.15
shader_param/speed = 1.0
shader_param/ray1_density = 8.0
shader_param/ray2_density = 30.0
shader_param/ray2_intensity = 0.01
shader_param/color = Color( 1, 0.9, 0.65, 0.8 )
shader_param/hdr = false
shader_param/seed = 5.0

[node name="Corridor2" type="Node2D"]

[node name="TextureRect" type="TextureRect" parent="."]
margin_right = 582.0
margin_bottom = 246.0
texture = ExtResource( 1 )
expand = true

[node name="Floor" type="StaticBody2D" parent="."]
position = Vector2( 296, 232 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="Floor"]
position = Vector2( -5, -4 )
shape = SubResource( 1 )

[node name="LeftWall" type="StaticBody2D" parent="."]
position = Vector2( 0, 114 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="LeftWall"]
position = Vector2( 13.5, 0 )
shape = SubResource( 2 )

[node name="RightWall" type="StaticBody2D" parent="."]
position = Vector2( 565, 115 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="RightWall"]
shape = SubResource( 2 )

[node name="Obraz" type="Sprite" parent="."]
position = Vector2( 182, 109 )
scale = Vector2( 1.28906, 1.28906 )
texture = ExtResource( 6 )

[node name="Okno" type="Sprite" parent="."]
position = Vector2( 395, 100 )
scale = Vector2( 0.95, 0.95 )
texture = ExtResource( 7 )

[node name="Door" parent="." instance=ExtResource( 3 )]
position = Vector2( 31, 175 )
scale = Vector2( -1, 1 )
leads = "res://Scenes/Rooms/Room2.tscn"
open = false

[node name="Door2" parent="." instance=ExtResource( 3 )]
position = Vector2( 550, 178 )
leads = "res://Scenes/Rooms/Room3.tscn"

[node name="Torch" parent="." instance=ExtResource( 5 )]
position = Vector2( 80, 90 )

[node name="ColorRect" type="ColorRect" parent="."]
self_modulate = Color( 1, 1, 1, 0.490196 )
material = SubResource( 4 )
margin_left = 383.0
margin_top = 76.0
margin_right = 519.0
margin_bottom = 229.0

[node name="Wardrobe" parent="." instance=ExtResource( 12 )]
position = Vector2( 164, 160 )
scale = Vector2( 0.6, 0.6 )

[node name="ChandelierButton" parent="." instance=ExtResource( 13 )]
position = Vector2( 439, 153 )
leads = NodePath("../Chandelier")

[node name="Chandelier" parent="." instance=ExtResource( 14 )]
position = Vector2( 295, 46 )

[node name="Player" parent="." instance=ExtResource( 2 )]
position = Vector2( 63, 174 )

[node name="RemoteTransform2D" type="RemoteTransform2D" parent="Player"]
remote_path = NodePath("../../Camera2D")

[node name="Camera2D" type="Camera2D" parent="."]
position = Vector2( 63, 174 )
current = true
limit_left = 0
limit_top = -1
limit_right = 582
limit_bottom = 246
script = ExtResource( 4 )

[node name="TextureRect" type="TextureRect" parent="Camera2D"]
visible = false
light_mask = 0
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = 36.0
margin_top = -155.0
margin_right = 248.0
margin_bottom = 57.0
texture = ExtResource( 8 )
expand = true

[node name="Label" type="Label" parent="Camera2D/TextureRect"]
self_modulate = Color( 0, 0, 0, 1 )
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = 57.0
margin_top = 17.0
margin_right = 12.0
margin_bottom = 93.0
rect_scale = Vector2( 0.6, 0.6 )
theme = ExtResource( 9 )
align = 1
autowrap = true

[node name="Enemy" parent="." instance=ExtResource( 11 )]
position = Vector2( 462, 165 )
